//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using LINQtoCSV;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("ProjectsDataBaseModel", "FK_Values_Values", "Properties", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(ProjectManager.WebUI.Models.Property), "DefaultValues", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(ProjectManager.WebUI.Models.DefaultValue), true)]
[assembly: EdmRelationshipAttribute("ProjectsDataBaseModel", "FK_History_Persons", "Persons", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(ProjectManager.WebUI.Models.Person), "History", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(ProjectManager.WebUI.Models.History), true)]
[assembly: EdmRelationshipAttribute("ProjectsDataBaseModel", "FK_History_Projects", "Projects", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(ProjectManager.WebUI.Models.Project), "History", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(ProjectManager.WebUI.Models.History), true)]
[assembly: EdmRelationshipAttribute("ProjectsDataBaseModel", "FK_History_Properties", "Properties", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(ProjectManager.WebUI.Models.Property), "History", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(ProjectManager.WebUI.Models.History), true)]
[assembly: EdmRelationshipAttribute("ProjectsDataBaseModel", "FK_Projects_Persons", "Persons", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(ProjectManager.WebUI.Models.Person), "Projects", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(ProjectManager.WebUI.Models.Project), true)]
[assembly: EdmRelationshipAttribute("ProjectsDataBaseModel", "FK_PropertiesOfProjects_Persons", "Persons", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(ProjectManager.WebUI.Models.Person), "PropertiesOfProjects", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(ProjectManager.WebUI.Models.PropertiesOfProject), true)]
[assembly: EdmRelationshipAttribute("ProjectsDataBaseModel", "FK_PropertiesOfProjects_PropertiesOfProjects", "Projects", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(ProjectManager.WebUI.Models.Project), "PropertiesOfProjects", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(ProjectManager.WebUI.Models.PropertiesOfProject), true)]
[assembly: EdmRelationshipAttribute("ProjectsDataBaseModel", "FK_Properties_Types", "Types", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(ProjectManager.WebUI.Models.Type), "Properties", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(ProjectManager.WebUI.Models.Property), true)]
[assembly: EdmRelationshipAttribute("ProjectsDataBaseModel", "FK_PropertiesOfProjects_Properties", "Properties", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(ProjectManager.WebUI.Models.Property), "PropertiesOfProjects", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(ProjectManager.WebUI.Models.PropertiesOfProject), true)]

#endregion

namespace ProjectManager.WebUI.Models
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class Repository : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new Repository object using the connection string found in the 'Repository' section of the application configuration file.
        /// </summary>
        public Repository() : base("name=Repository", "Repository")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new Repository object.
        /// </summary>
        public Repository(string connectionString) : base(connectionString, "Repository")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new Repository object.
        /// </summary>
        public Repository(EntityConnection connection) : base(connection, "Repository")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<DefaultValue> DefaultValues
        {
            get
            {
                if ((_DefaultValues == null))
                {
                    _DefaultValues = base.CreateObjectSet<DefaultValue>("DefaultValues");
                }
                return _DefaultValues;
            }
        }
        private ObjectSet<DefaultValue> _DefaultValues;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<History> Histories
        {
            get
            {
                if ((_Histories == null))
                {
                    _Histories = base.CreateObjectSet<History>("Histories");
                }
                return _Histories;
            }
        }
        private ObjectSet<History> _Histories;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Person> Persons
        {
            get
            {
                if ((_Persons == null))
                {
                    _Persons = base.CreateObjectSet<Person>("Persons");
                }
                return _Persons;
            }
        }
        private ObjectSet<Person> _Persons;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Project> Projects
        {
            get
            {
                if ((_Projects == null))
                {
                    _Projects = base.CreateObjectSet<Project>("Projects");
                }
                return _Projects;
            }
        }
        private ObjectSet<Project> _Projects;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Property> Properties
        {
            get
            {
                if ((_Properties == null))
                {
                    _Properties = base.CreateObjectSet<Property>("Properties");
                }
                return _Properties;
            }
        }
        private ObjectSet<Property> _Properties;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<PropertiesOfProject> PropertiesOfProjects
        {
            get
            {
                if ((_PropertiesOfProjects == null))
                {
                    _PropertiesOfProjects = base.CreateObjectSet<PropertiesOfProject>("PropertiesOfProjects");
                }
                return _PropertiesOfProjects;
            }
        }
        private ObjectSet<PropertiesOfProject> _PropertiesOfProjects;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Type> Types
        {
            get
            {
                if ((_Types == null))
                {
                    _Types = base.CreateObjectSet<Type>("Types");
                }
                return _Types;
            }
        }
        private ObjectSet<Type> _Types;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the DefaultValues EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToDefaultValues(DefaultValue defaultValue)
        {
            base.AddObject("DefaultValues", defaultValue);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Histories EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToHistories(History history)
        {
            base.AddObject("Histories", history);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Persons EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPersons(Person person)
        {
            base.AddObject("Persons", person);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Projects EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToProjects(Project project)
        {
            base.AddObject("Projects", project);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Properties EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToProperties(Property property)
        {
            base.AddObject("Properties", property);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the PropertiesOfProjects EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPropertiesOfProjects(PropertiesOfProject propertiesOfProject)
        {
            base.AddObject("PropertiesOfProjects", propertiesOfProject);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Types EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTypes(Type type)
        {
            base.AddObject("Types", type);
        }

        #endregion
    }
    

    #endregion
    
    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ProjectsDataBaseModel", Name="DefaultValue")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class DefaultValue : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new DefaultValue object.
        /// </summary>
        /// <param name="valueID">Initial value of the ValueID property.</param>
        /// <param name="propertyID">Initial value of the PropertyID property.</param>
        /// <param name="value">Initial value of the Value property.</param>
        public static DefaultValue CreateDefaultValue(global::System.Guid valueID, global::System.Guid propertyID, global::System.String value)
        {
            DefaultValue defaultValue = new DefaultValue();
            defaultValue.ValueID = valueID;
            defaultValue.PropertyID = propertyID;
            defaultValue.Value = value;
            return defaultValue;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ValueID
        {
            get
            {
                return _ValueID;
            }
            set
            {
                if (_ValueID != value)
                {
                    OnValueIDChanging(value);
                    ReportPropertyChanging("ValueID");
                    _ValueID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ValueID");
                    OnValueIDChanged();
                }
            }
        }
        private global::System.Guid _ValueID;
        partial void OnValueIDChanging(global::System.Guid value);
        partial void OnValueIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid PropertyID
        {
            get
            {
                return _PropertyID;
            }
            set
            {
                OnPropertyIDChanging(value);
                ReportPropertyChanging("PropertyID");
                _PropertyID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PropertyID");
                OnPropertyIDChanged();
            }
        }
        private global::System.Guid _PropertyID;
        partial void OnPropertyIDChanging(global::System.Guid value);
        partial void OnPropertyIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Value
        {
            get
            {
                return _Value;
            }
            set
            {
                OnValueChanging(value);
                ReportPropertyChanging("Value");
                _Value = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Value");
                OnValueChanged();
            }
        }
        private global::System.String _Value;
        partial void OnValueChanging(global::System.String value);
        partial void OnValueChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ProjectsDataBaseModel", "FK_Values_Values", "Properties")]
        public Property Property
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Property>("ProjectsDataBaseModel.FK_Values_Values", "Properties").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Property>("ProjectsDataBaseModel.FK_Values_Values", "Properties").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Property> PropertyReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Property>("ProjectsDataBaseModel.FK_Values_Values", "Properties");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Property>("ProjectsDataBaseModel.FK_Values_Values", "Properties", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ProjectsDataBaseModel", Name="History")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class History : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new History object.
        /// </summary>
        /// <param name="recordID">Initial value of the RecordID property.</param>
        /// <param name="projectID">Initial value of the ProjectID property.</param>
        /// <param name="propertyID">Initial value of the PropertyID property.</param>
        /// <param name="propertyValue">Initial value of the PropertyValue property.</param>
        /// <param name="propertyPersonIDModified">Initial value of the PropertyPersonIDModified property.</param>
        /// <param name="propertyDateTimeModified">Initial value of the PropertyDateTimeModified property.</param>
        public static History CreateHistory(global::System.Guid recordID, global::System.Guid projectID, global::System.Guid propertyID, global::System.String propertyValue, global::System.Guid propertyPersonIDModified, global::System.DateTime propertyDateTimeModified)
        {
            History history = new History();
            history.RecordID = recordID;
            history.ProjectID = projectID;
            history.PropertyID = propertyID;
            history.PropertyValue = propertyValue;
            history.PropertyPersonIDModified = propertyPersonIDModified;
            history.PropertyDateTimeModified = propertyDateTimeModified;
            return history;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid RecordID
        {
            get
            {
                return _RecordID;
            }
            set
            {
                if (_RecordID != value)
                {
                    OnRecordIDChanging(value);
                    ReportPropertyChanging("RecordID");
                    _RecordID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("RecordID");
                    OnRecordIDChanged();
                }
            }
        }
        private global::System.Guid _RecordID;
        partial void OnRecordIDChanging(global::System.Guid value);
        partial void OnRecordIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ProjectID
        {
            get
            {
                return _ProjectID;
            }
            set
            {
                OnProjectIDChanging(value);
                ReportPropertyChanging("ProjectID");
                _ProjectID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ProjectID");
                OnProjectIDChanged();
            }
        }
        private global::System.Guid _ProjectID;
        partial void OnProjectIDChanging(global::System.Guid value);
        partial void OnProjectIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid PropertyID
        {
            get
            {
                return _PropertyID;
            }
            set
            {
                OnPropertyIDChanging(value);
                ReportPropertyChanging("PropertyID");
                _PropertyID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PropertyID");
                OnPropertyIDChanged();
            }
        }
        private global::System.Guid _PropertyID;
        partial void OnPropertyIDChanging(global::System.Guid value);
        partial void OnPropertyIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String PropertyValue
        {
            get
            {
                return _PropertyValue;
            }
            set
            {
                OnPropertyValueChanging(value);
                ReportPropertyChanging("PropertyValue");
                _PropertyValue = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("PropertyValue");
                OnPropertyValueChanged();
            }
        }
        private global::System.String _PropertyValue;
        partial void OnPropertyValueChanging(global::System.String value);
        partial void OnPropertyValueChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid PropertyPersonIDModified
        {
            get
            {
                return _PropertyPersonIDModified;
            }
            set
            {
                OnPropertyPersonIDModifiedChanging(value);
                ReportPropertyChanging("PropertyPersonIDModified");
                _PropertyPersonIDModified = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PropertyPersonIDModified");
                OnPropertyPersonIDModifiedChanged();
            }
        }
        private global::System.Guid _PropertyPersonIDModified;
        partial void OnPropertyPersonIDModifiedChanging(global::System.Guid value);
        partial void OnPropertyPersonIDModifiedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime PropertyDateTimeModified
        {
            get
            {
                return _PropertyDateTimeModified;
            }
            set
            {
                OnPropertyDateTimeModifiedChanging(value);
                ReportPropertyChanging("PropertyDateTimeModified");
                _PropertyDateTimeModified = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PropertyDateTimeModified");
                OnPropertyDateTimeModifiedChanged();
            }
        }
        private global::System.DateTime _PropertyDateTimeModified;
        partial void OnPropertyDateTimeModifiedChanging(global::System.DateTime value);
        partial void OnPropertyDateTimeModifiedChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ProjectsDataBaseModel", "FK_History_Persons", "Persons")]
        public Person Person
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Person>("ProjectsDataBaseModel.FK_History_Persons", "Persons").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Person>("ProjectsDataBaseModel.FK_History_Persons", "Persons").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Person> PersonReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Person>("ProjectsDataBaseModel.FK_History_Persons", "Persons");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Person>("ProjectsDataBaseModel.FK_History_Persons", "Persons", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ProjectsDataBaseModel", "FK_History_Projects", "Projects")]
        public Project Project
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Project>("ProjectsDataBaseModel.FK_History_Projects", "Projects").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Project>("ProjectsDataBaseModel.FK_History_Projects", "Projects").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Project> ProjectReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Project>("ProjectsDataBaseModel.FK_History_Projects", "Projects");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Project>("ProjectsDataBaseModel.FK_History_Projects", "Projects", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ProjectsDataBaseModel", "FK_History_Properties", "Properties")]
        public Property Property
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Property>("ProjectsDataBaseModel.FK_History_Properties", "Properties").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Property>("ProjectsDataBaseModel.FK_History_Properties", "Properties").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Property> PropertyReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Property>("ProjectsDataBaseModel.FK_History_Properties", "Properties");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Property>("ProjectsDataBaseModel.FK_History_Properties", "Properties", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ProjectsDataBaseModel", Name="Person")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Person : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Person object.
        /// </summary>
        /// <param name="personID">Initial value of the PersonID property.</param>
        /// <param name="personName">Initial value of the PersonName property.</param>
        public static Person CreatePerson(global::System.Guid personID, global::System.String personName)
        {
            Person person = new Person();
            person.PersonID = personID;
            person.PersonName = personName;
            return person;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid PersonID
        {
            get
            {
                return _PersonID;
            }
            set
            {
                if (_PersonID != value)
                {
                    OnPersonIDChanging(value);
                    ReportPropertyChanging("PersonID");
                    _PersonID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("PersonID");
                    OnPersonIDChanged();
                }
            }
        }
        private global::System.Guid _PersonID;
        partial void OnPersonIDChanging(global::System.Guid value);
        partial void OnPersonIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String PersonName
        {
            get
            {
                return _PersonName;
            }
            set
            {
                OnPersonNameChanging(value);
                ReportPropertyChanging("PersonName");
                _PersonName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("PersonName");
                OnPersonNameChanged();
            }
        }
        private global::System.String _PersonName;
        partial void OnPersonNameChanging(global::System.String value);
        partial void OnPersonNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ProjectsDataBaseModel", "FK_History_Persons", "History")]
        public EntityCollection<History> Histories
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<History>("ProjectsDataBaseModel.FK_History_Persons", "History");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<History>("ProjectsDataBaseModel.FK_History_Persons", "History", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ProjectsDataBaseModel", "FK_Projects_Persons", "Projects")]
        public EntityCollection<Project> Projects
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Project>("ProjectsDataBaseModel.FK_Projects_Persons", "Projects");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Project>("ProjectsDataBaseModel.FK_Projects_Persons", "Projects", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ProjectsDataBaseModel", "FK_PropertiesOfProjects_Persons", "PropertiesOfProjects")]
        public EntityCollection<PropertiesOfProject> PropertiesOfProjects
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<PropertiesOfProject>("ProjectsDataBaseModel.FK_PropertiesOfProjects_Persons", "PropertiesOfProjects");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<PropertiesOfProject>("ProjectsDataBaseModel.FK_PropertiesOfProjects_Persons", "PropertiesOfProjects", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ProjectsDataBaseModel", Name="Project")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Project : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Project object.
        /// </summary>
        /// <param name="projectID">Initial value of the ProjectID property.</param>
        /// <param name="createBy">Initial value of the CreateBy property.</param>
        /// <param name="createAt">Initial value of the CreateAt property.</param>
        public static Project CreateProject(global::System.Guid projectID, global::System.Guid createBy, global::System.DateTime createAt)
        {
            Project project = new Project();
            project.ProjectID = projectID;
            project.CreateBy = createBy;
            project.CreateAt = createAt;
            return project;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ProjectID
        {
            get
            {
                return _ProjectID;
            }
            set
            {
                if (_ProjectID != value)
                {
                    OnProjectIDChanging(value);
                    ReportPropertyChanging("ProjectID");
                    _ProjectID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ProjectID");
                    OnProjectIDChanged();
                }
            }
        }
        private global::System.Guid _ProjectID;
        partial void OnProjectIDChanging(global::System.Guid value);
        partial void OnProjectIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid CreateBy
        {
            get
            {
                return _CreateBy;
            }
            set
            {
                OnCreateByChanging(value);
                ReportPropertyChanging("CreateBy");
                _CreateBy = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreateBy");
                OnCreateByChanged();
            }
        }
        private global::System.Guid _CreateBy;
        partial void OnCreateByChanging(global::System.Guid value);
        partial void OnCreateByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime CreateAt
        {
            get
            {
                return _CreateAt;
            }
            set
            {
                OnCreateAtChanging(value);
                ReportPropertyChanging("CreateAt");
                _CreateAt = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreateAt");
                OnCreateAtChanged();
            }
        }
        private global::System.DateTime _CreateAt;
        partial void OnCreateAtChanging(global::System.DateTime value);
        partial void OnCreateAtChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ProjectsDataBaseModel", "FK_History_Projects", "History")]
        public EntityCollection<History> Histories
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<History>("ProjectsDataBaseModel.FK_History_Projects", "History");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<History>("ProjectsDataBaseModel.FK_History_Projects", "History", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ProjectsDataBaseModel", "FK_Projects_Persons", "Persons")]
        public Person Person
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Person>("ProjectsDataBaseModel.FK_Projects_Persons", "Persons").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Person>("ProjectsDataBaseModel.FK_Projects_Persons", "Persons").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Person> PersonReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Person>("ProjectsDataBaseModel.FK_Projects_Persons", "Persons");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Person>("ProjectsDataBaseModel.FK_Projects_Persons", "Persons", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ProjectsDataBaseModel", "FK_PropertiesOfProjects_PropertiesOfProjects", "PropertiesOfProjects")]
        public EntityCollection<PropertiesOfProject> PropertiesOfProjects
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<PropertiesOfProject>("ProjectsDataBaseModel.FK_PropertiesOfProjects_PropertiesOfProjects", "PropertiesOfProjects");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<PropertiesOfProject>("ProjectsDataBaseModel.FK_PropertiesOfProjects_PropertiesOfProjects", "PropertiesOfProjects", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ProjectsDataBaseModel", Name="PropertiesOfProject")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class PropertiesOfProject : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new PropertiesOfProject object.
        /// </summary>
        /// <param name="recordID">Initial value of the RecordID property.</param>
        /// <param name="projectID">Initial value of the ProjectID property.</param>
        /// <param name="propertyID">Initial value of the PropertyID property.</param>
        /// <param name="propertyValue">Initial value of the PropertyValue property.</param>
        /// <param name="propertyPersonIDModified">Initial value of the PropertyPersonIDModified property.</param>
        /// <param name="propertyDateTimeModified">Initial value of the PropertyDateTimeModified property.</param>
        public static PropertiesOfProject CreatePropertiesOfProject(global::System.Guid recordID, global::System.Guid projectID, global::System.Guid propertyID, global::System.String propertyValue, global::System.Guid propertyPersonIDModified, global::System.DateTime propertyDateTimeModified)
        {
            PropertiesOfProject propertiesOfProject = new PropertiesOfProject();
            propertiesOfProject.RecordID = recordID;
            propertiesOfProject.ProjectID = projectID;
            propertiesOfProject.PropertyID = propertyID;
            propertiesOfProject.PropertyValue = propertyValue;
            propertiesOfProject.PropertyPersonIDModified = propertyPersonIDModified;
            propertiesOfProject.PropertyDateTimeModified = propertyDateTimeModified;
            return propertiesOfProject;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid RecordID
        {
            get
            {
                return _RecordID;
            }
            set
            {
                if (_RecordID != value)
                {
                    OnRecordIDChanging(value);
                    ReportPropertyChanging("RecordID");
                    _RecordID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("RecordID");
                    OnRecordIDChanged();
                }
            }
        }
        private global::System.Guid _RecordID;
        partial void OnRecordIDChanging(global::System.Guid value);
        partial void OnRecordIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ProjectID
        {
            get
            {
                return _ProjectID;
            }
            set
            {
                OnProjectIDChanging(value);
                ReportPropertyChanging("ProjectID");
                _ProjectID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ProjectID");
                OnProjectIDChanged();
            }
        }
        private global::System.Guid _ProjectID;
        partial void OnProjectIDChanging(global::System.Guid value);
        partial void OnProjectIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid PropertyID
        {
            get
            {
                return _PropertyID;
            }
            set
            {
                OnPropertyIDChanging(value);
                ReportPropertyChanging("PropertyID");
                _PropertyID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PropertyID");
                OnPropertyIDChanged();
            }
        }
        private global::System.Guid _PropertyID;
        partial void OnPropertyIDChanging(global::System.Guid value);
        partial void OnPropertyIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String PropertyValue
        {
            get
            {
                return _PropertyValue;
            }
            set
            {
                OnPropertyValueChanging(value);
                ReportPropertyChanging("PropertyValue");
                _PropertyValue = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("PropertyValue");
                OnPropertyValueChanged();
            }
        }
        private global::System.String _PropertyValue;
        partial void OnPropertyValueChanging(global::System.String value);
        partial void OnPropertyValueChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid PropertyPersonIDModified
        {
            get
            {
                return _PropertyPersonIDModified;
            }
            set
            {
                OnPropertyPersonIDModifiedChanging(value);
                ReportPropertyChanging("PropertyPersonIDModified");
                _PropertyPersonIDModified = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PropertyPersonIDModified");
                OnPropertyPersonIDModifiedChanged();
            }
        }
        private global::System.Guid _PropertyPersonIDModified;
        partial void OnPropertyPersonIDModifiedChanging(global::System.Guid value);
        partial void OnPropertyPersonIDModifiedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime PropertyDateTimeModified
        {
            get
            {
                return _PropertyDateTimeModified;
            }
            set
            {
                OnPropertyDateTimeModifiedChanging(value);
                ReportPropertyChanging("PropertyDateTimeModified");
                _PropertyDateTimeModified = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PropertyDateTimeModified");
                OnPropertyDateTimeModifiedChanged();
            }
        }
        private global::System.DateTime _PropertyDateTimeModified;
        partial void OnPropertyDateTimeModifiedChanging(global::System.DateTime value);
        partial void OnPropertyDateTimeModifiedChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ProjectsDataBaseModel", "FK_PropertiesOfProjects_Persons", "Persons")]
        public Person Person
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Person>("ProjectsDataBaseModel.FK_PropertiesOfProjects_Persons", "Persons").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Person>("ProjectsDataBaseModel.FK_PropertiesOfProjects_Persons", "Persons").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Person> PersonReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Person>("ProjectsDataBaseModel.FK_PropertiesOfProjects_Persons", "Persons");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Person>("ProjectsDataBaseModel.FK_PropertiesOfProjects_Persons", "Persons", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ProjectsDataBaseModel", "FK_PropertiesOfProjects_PropertiesOfProjects", "Projects")]
        public Project Project
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Project>("ProjectsDataBaseModel.FK_PropertiesOfProjects_PropertiesOfProjects", "Projects").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Project>("ProjectsDataBaseModel.FK_PropertiesOfProjects_PropertiesOfProjects", "Projects").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Project> ProjectReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Project>("ProjectsDataBaseModel.FK_PropertiesOfProjects_PropertiesOfProjects", "Projects");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Project>("ProjectsDataBaseModel.FK_PropertiesOfProjects_PropertiesOfProjects", "Projects", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ProjectsDataBaseModel", "FK_PropertiesOfProjects_Properties", "Properties")]
        public Property Property
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Property>("ProjectsDataBaseModel.FK_PropertiesOfProjects_Properties", "Properties").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Property>("ProjectsDataBaseModel.FK_PropertiesOfProjects_Properties", "Properties").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Property> PropertyReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Property>("ProjectsDataBaseModel.FK_PropertiesOfProjects_Properties", "Properties");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Property>("ProjectsDataBaseModel.FK_PropertiesOfProjects_Properties", "Properties", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ProjectsDataBaseModel", Name="Property")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Property : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Property object.
        /// </summary>
        /// <param name="propertyID">Initial value of the PropertyID property.</param>
        /// <param name="propertyTypeID">Initial value of the PropertyTypeID property.</param>
        /// <param name="propertyName">Initial value of the PropertyName property.</param>
        /// <param name="propertyIsPublic">Initial value of the PropertyIsPublic property.</param>
        /// <param name="propertyIsDefault">Initial value of the PropertyIsDefault property.</param>
        public static Property CreateProperty(global::System.Guid propertyID, global::System.Guid propertyTypeID, global::System.String propertyName, global::System.Boolean propertyIsPublic, global::System.Boolean propertyIsDefault)
        {
            Property property = new Property();
            property.PropertyID = propertyID;
            property.PropertyTypeID = propertyTypeID;
            property.PropertyName = propertyName;
            property.PropertyIsPublic = propertyIsPublic;
            property.PropertyIsDefault = propertyIsDefault;
            return property;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid PropertyID
        {
            get
            {
                return _PropertyID;
            }
            set
            {
                if (_PropertyID != value)
                {
                    OnPropertyIDChanging(value);
                    ReportPropertyChanging("PropertyID");
                    _PropertyID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("PropertyID");
                    OnPropertyIDChanged();
                }
            }
        }
        private global::System.Guid _PropertyID;
        partial void OnPropertyIDChanging(global::System.Guid value);
        partial void OnPropertyIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid PropertyTypeID
        {
            get
            {
                return _PropertyTypeID;
            }
            set
            {
                OnPropertyTypeIDChanging(value);
                ReportPropertyChanging("PropertyTypeID");
                _PropertyTypeID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PropertyTypeID");
                OnPropertyTypeIDChanged();
            }
        }
        private global::System.Guid _PropertyTypeID;
        partial void OnPropertyTypeIDChanging(global::System.Guid value);
        partial void OnPropertyTypeIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String PropertyName
        {
            get
            {
                return _PropertyName;
            }
            set
            {
                OnPropertyNameChanging(value);
                ReportPropertyChanging("PropertyName");
                _PropertyName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("PropertyName");
                OnPropertyNameChanged();
            }
        }
        private global::System.String _PropertyName;
        partial void OnPropertyNameChanging(global::System.String value);
        partial void OnPropertyNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean PropertyIsPublic
        {
            get
            {
                return _PropertyIsPublic;
            }
            set
            {
                OnPropertyIsPublicChanging(value);
                ReportPropertyChanging("PropertyIsPublic");
                _PropertyIsPublic = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PropertyIsPublic");
                OnPropertyIsPublicChanged();
            }
        }
        private global::System.Boolean _PropertyIsPublic;
        partial void OnPropertyIsPublicChanging(global::System.Boolean value);
        partial void OnPropertyIsPublicChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean PropertyIsDefault
        {
            get
            {
                return _PropertyIsDefault;
            }
            set
            {
                OnPropertyIsDefaultChanging(value);
                ReportPropertyChanging("PropertyIsDefault");
                _PropertyIsDefault = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PropertyIsDefault");
                OnPropertyIsDefaultChanged();
            }
        }
        private global::System.Boolean _PropertyIsDefault;
        partial void OnPropertyIsDefaultChanging(global::System.Boolean value);
        partial void OnPropertyIsDefaultChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ProjectsDataBaseModel", "FK_Values_Values", "DefaultValues")]
        public EntityCollection<DefaultValue> DefaultValues
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<DefaultValue>("ProjectsDataBaseModel.FK_Values_Values", "DefaultValues");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<DefaultValue>("ProjectsDataBaseModel.FK_Values_Values", "DefaultValues", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ProjectsDataBaseModel", "FK_History_Properties", "History")]
        public EntityCollection<History> Histories
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<History>("ProjectsDataBaseModel.FK_History_Properties", "History");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<History>("ProjectsDataBaseModel.FK_History_Properties", "History", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ProjectsDataBaseModel", "FK_Properties_Types", "Types")]
        public Type Type
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Type>("ProjectsDataBaseModel.FK_Properties_Types", "Types").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Type>("ProjectsDataBaseModel.FK_Properties_Types", "Types").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Type> TypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Type>("ProjectsDataBaseModel.FK_Properties_Types", "Types");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Type>("ProjectsDataBaseModel.FK_Properties_Types", "Types", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ProjectsDataBaseModel", "FK_PropertiesOfProjects_Properties", "PropertiesOfProjects")]
        public EntityCollection<PropertiesOfProject> PropertiesOfProjects
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<PropertiesOfProject>("ProjectsDataBaseModel.FK_PropertiesOfProjects_Properties", "PropertiesOfProjects");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<PropertiesOfProject>("ProjectsDataBaseModel.FK_PropertiesOfProjects_Properties", "PropertiesOfProjects", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ProjectsDataBaseModel", Name="Type")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Type : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Type object.
        /// </summary>
        /// <param name="typeID">Initial value of the TypeID property.</param>
        /// <param name="typeName">Initial value of the TypeName property.</param>
        public static Type CreateType(global::System.Guid typeID, global::System.String typeName)
        {
            Type type = new Type();
            type.TypeID = typeID;
            type.TypeName = typeName;
            return type;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid TypeID
        {
            get
            {
                return _TypeID;
            }
            set
            {
                if (_TypeID != value)
                {
                    OnTypeIDChanging(value);
                    ReportPropertyChanging("TypeID");
                    _TypeID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("TypeID");
                    OnTypeIDChanged();
                }
            }
        }
        private global::System.Guid _TypeID;
        partial void OnTypeIDChanging(global::System.Guid value);
        partial void OnTypeIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String TypeName
        {
            get
            {
                return _TypeName;
            }
            set
            {
                OnTypeNameChanging(value);
                ReportPropertyChanging("TypeName");
                _TypeName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("TypeName");
                OnTypeNameChanged();
            }
        }
        private global::System.String _TypeName;
        partial void OnTypeNameChanging(global::System.String value);
        partial void OnTypeNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ProjectsDataBaseModel", "FK_Properties_Types", "Properties")]
        public EntityCollection<Property> Properties
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Property>("ProjectsDataBaseModel.FK_Properties_Types", "Properties");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Property>("ProjectsDataBaseModel.FK_Properties_Types", "Properties", value);
                }
            }
        }

        #endregion
    }

    #endregion
    
}
